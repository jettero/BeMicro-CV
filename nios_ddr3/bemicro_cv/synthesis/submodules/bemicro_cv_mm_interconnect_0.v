// bemicro_cv_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2014.10.29.21:49:19

`timescale 1 ps / 1 ps
module bemicro_cv_mm_interconnect_0 (
		input  wire        syspll_outclk0_clk,                           //                         syspll_outclk0.clk
		input  wire        nios_cpu_reset_n_reset_bridge_in_reset_reset, // nios_cpu_reset_n_reset_bridge_in_reset.reset
		input  wire [27:0] nios_cpu_data_master_address,                 //                   nios_cpu_data_master.address
		output wire        nios_cpu_data_master_waitrequest,             //                                       .waitrequest
		input  wire [3:0]  nios_cpu_data_master_burstcount,              //                                       .burstcount
		input  wire [3:0]  nios_cpu_data_master_byteenable,              //                                       .byteenable
		input  wire        nios_cpu_data_master_read,                    //                                       .read
		output wire [31:0] nios_cpu_data_master_readdata,                //                                       .readdata
		output wire        nios_cpu_data_master_readdatavalid,           //                                       .readdatavalid
		input  wire        nios_cpu_data_master_write,                   //                                       .write
		input  wire [31:0] nios_cpu_data_master_writedata,               //                                       .writedata
		input  wire        nios_cpu_data_master_debugaccess,             //                                       .debugaccess
		input  wire [27:0] nios_cpu_instruction_master_address,          //            nios_cpu_instruction_master.address
		output wire        nios_cpu_instruction_master_waitrequest,      //                                       .waitrequest
		input  wire [3:0]  nios_cpu_instruction_master_burstcount,       //                                       .burstcount
		input  wire        nios_cpu_instruction_master_read,             //                                       .read
		output wire [31:0] nios_cpu_instruction_master_readdata,         //                                       .readdata
		output wire        nios_cpu_instruction_master_readdatavalid,    //                                       .readdatavalid
		output wire [24:0] ddr3_control_avl_0_address,                   //                     ddr3_control_avl_0.address
		output wire        ddr3_control_avl_0_write,                     //                                       .write
		output wire        ddr3_control_avl_0_read,                      //                                       .read
		input  wire [31:0] ddr3_control_avl_0_readdata,                  //                                       .readdata
		output wire [31:0] ddr3_control_avl_0_writedata,                 //                                       .writedata
		output wire        ddr3_control_avl_0_beginbursttransfer,        //                                       .beginbursttransfer
		output wire [2:0]  ddr3_control_avl_0_burstcount,                //                                       .burstcount
		output wire [3:0]  ddr3_control_avl_0_byteenable,                //                                       .byteenable
		input  wire        ddr3_control_avl_0_readdatavalid,             //                                       .readdatavalid
		input  wire        ddr3_control_avl_0_waitrequest,               //                                       .waitrequest
		output wire [9:0]  mm_bridge_0_s0_address,                       //                         mm_bridge_0_s0.address
		output wire        mm_bridge_0_s0_write,                         //                                       .write
		output wire        mm_bridge_0_s0_read,                          //                                       .read
		input  wire [31:0] mm_bridge_0_s0_readdata,                      //                                       .readdata
		output wire [31:0] mm_bridge_0_s0_writedata,                     //                                       .writedata
		output wire [0:0]  mm_bridge_0_s0_burstcount,                    //                                       .burstcount
		output wire [3:0]  mm_bridge_0_s0_byteenable,                    //                                       .byteenable
		input  wire        mm_bridge_0_s0_readdatavalid,                 //                                       .readdatavalid
		input  wire        mm_bridge_0_s0_waitrequest,                   //                                       .waitrequest
		output wire        mm_bridge_0_s0_debugaccess,                   //                                       .debugaccess
		output wire [8:0]  nios_cpu_jtag_debug_module_address,           //             nios_cpu_jtag_debug_module.address
		output wire        nios_cpu_jtag_debug_module_write,             //                                       .write
		output wire        nios_cpu_jtag_debug_module_read,              //                                       .read
		input  wire [31:0] nios_cpu_jtag_debug_module_readdata,          //                                       .readdata
		output wire [31:0] nios_cpu_jtag_debug_module_writedata,         //                                       .writedata
		output wire [3:0]  nios_cpu_jtag_debug_module_byteenable,        //                                       .byteenable
		input  wire        nios_cpu_jtag_debug_module_waitrequest,       //                                       .waitrequest
		output wire        nios_cpu_jtag_debug_module_debugaccess,       //                                       .debugaccess
		output wire [13:0] onchip_mem_s1_address,                        //                          onchip_mem_s1.address
		output wire        onchip_mem_s1_write,                          //                                       .write
		input  wire [31:0] onchip_mem_s1_readdata,                       //                                       .readdata
		output wire [31:0] onchip_mem_s1_writedata,                      //                                       .writedata
		output wire [3:0]  onchip_mem_s1_byteenable,                     //                                       .byteenable
		output wire        onchip_mem_s1_chipselect,                     //                                       .chipselect
		output wire        onchip_mem_s1_clken                           //                                       .clken
	);

	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios_cpu_instruction_master_agent:av_waitrequest -> nios_cpu_instruction_master_translator:uav_waitrequest
	wire    [5:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios_cpu_instruction_master_translator:uav_burstcount -> nios_cpu_instruction_master_agent:av_burstcount
	wire   [31:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // nios_cpu_instruction_master_translator:uav_writedata -> nios_cpu_instruction_master_agent:av_writedata
	wire   [27:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_address;       // nios_cpu_instruction_master_translator:uav_address -> nios_cpu_instruction_master_agent:av_address
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_lock;          // nios_cpu_instruction_master_translator:uav_lock -> nios_cpu_instruction_master_agent:av_lock
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_write;         // nios_cpu_instruction_master_translator:uav_write -> nios_cpu_instruction_master_agent:av_write
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_read;          // nios_cpu_instruction_master_translator:uav_read -> nios_cpu_instruction_master_agent:av_read
	wire   [31:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // nios_cpu_instruction_master_agent:av_readdata -> nios_cpu_instruction_master_translator:uav_readdata
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios_cpu_instruction_master_translator:uav_debugaccess -> nios_cpu_instruction_master_agent:av_debugaccess
	wire    [3:0] nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios_cpu_instruction_master_translator:uav_byteenable -> nios_cpu_instruction_master_agent:av_byteenable
	wire          nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios_cpu_instruction_master_agent:av_readdatavalid -> nios_cpu_instruction_master_translator:uav_readdatavalid
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // nios_cpu_data_master_agent:av_waitrequest -> nios_cpu_data_master_translator:uav_waitrequest
	wire    [5:0] nios_cpu_data_master_translator_avalon_universal_master_0_burstcount;           // nios_cpu_data_master_translator:uav_burstcount -> nios_cpu_data_master_agent:av_burstcount
	wire   [31:0] nios_cpu_data_master_translator_avalon_universal_master_0_writedata;            // nios_cpu_data_master_translator:uav_writedata -> nios_cpu_data_master_agent:av_writedata
	wire   [27:0] nios_cpu_data_master_translator_avalon_universal_master_0_address;              // nios_cpu_data_master_translator:uav_address -> nios_cpu_data_master_agent:av_address
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_lock;                 // nios_cpu_data_master_translator:uav_lock -> nios_cpu_data_master_agent:av_lock
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_write;                // nios_cpu_data_master_translator:uav_write -> nios_cpu_data_master_agent:av_write
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_read;                 // nios_cpu_data_master_translator:uav_read -> nios_cpu_data_master_agent:av_read
	wire   [31:0] nios_cpu_data_master_translator_avalon_universal_master_0_readdata;             // nios_cpu_data_master_agent:av_readdata -> nios_cpu_data_master_translator:uav_readdata
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // nios_cpu_data_master_translator:uav_debugaccess -> nios_cpu_data_master_agent:av_debugaccess
	wire    [3:0] nios_cpu_data_master_translator_avalon_universal_master_0_byteenable;           // nios_cpu_data_master_translator:uav_byteenable -> nios_cpu_data_master_agent:av_byteenable
	wire          nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios_cpu_data_master_agent:av_readdatavalid -> nios_cpu_data_master_translator:uav_readdatavalid
	wire          nios_cpu_jtag_debug_module_agent_m0_waitrequest;                                // nios_cpu_jtag_debug_module_translator:uav_waitrequest -> nios_cpu_jtag_debug_module_agent:m0_waitrequest
	wire    [2:0] nios_cpu_jtag_debug_module_agent_m0_burstcount;                                 // nios_cpu_jtag_debug_module_agent:m0_burstcount -> nios_cpu_jtag_debug_module_translator:uav_burstcount
	wire   [31:0] nios_cpu_jtag_debug_module_agent_m0_writedata;                                  // nios_cpu_jtag_debug_module_agent:m0_writedata -> nios_cpu_jtag_debug_module_translator:uav_writedata
	wire   [27:0] nios_cpu_jtag_debug_module_agent_m0_address;                                    // nios_cpu_jtag_debug_module_agent:m0_address -> nios_cpu_jtag_debug_module_translator:uav_address
	wire          nios_cpu_jtag_debug_module_agent_m0_write;                                      // nios_cpu_jtag_debug_module_agent:m0_write -> nios_cpu_jtag_debug_module_translator:uav_write
	wire          nios_cpu_jtag_debug_module_agent_m0_lock;                                       // nios_cpu_jtag_debug_module_agent:m0_lock -> nios_cpu_jtag_debug_module_translator:uav_lock
	wire          nios_cpu_jtag_debug_module_agent_m0_read;                                       // nios_cpu_jtag_debug_module_agent:m0_read -> nios_cpu_jtag_debug_module_translator:uav_read
	wire   [31:0] nios_cpu_jtag_debug_module_agent_m0_readdata;                                   // nios_cpu_jtag_debug_module_translator:uav_readdata -> nios_cpu_jtag_debug_module_agent:m0_readdata
	wire          nios_cpu_jtag_debug_module_agent_m0_readdatavalid;                              // nios_cpu_jtag_debug_module_translator:uav_readdatavalid -> nios_cpu_jtag_debug_module_agent:m0_readdatavalid
	wire          nios_cpu_jtag_debug_module_agent_m0_debugaccess;                                // nios_cpu_jtag_debug_module_agent:m0_debugaccess -> nios_cpu_jtag_debug_module_translator:uav_debugaccess
	wire    [3:0] nios_cpu_jtag_debug_module_agent_m0_byteenable;                                 // nios_cpu_jtag_debug_module_agent:m0_byteenable -> nios_cpu_jtag_debug_module_translator:uav_byteenable
	wire          nios_cpu_jtag_debug_module_agent_rf_source_endofpacket;                         // nios_cpu_jtag_debug_module_agent:rf_source_endofpacket -> nios_cpu_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          nios_cpu_jtag_debug_module_agent_rf_source_valid;                               // nios_cpu_jtag_debug_module_agent:rf_source_valid -> nios_cpu_jtag_debug_module_agent_rsp_fifo:in_valid
	wire          nios_cpu_jtag_debug_module_agent_rf_source_startofpacket;                       // nios_cpu_jtag_debug_module_agent:rf_source_startofpacket -> nios_cpu_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [108:0] nios_cpu_jtag_debug_module_agent_rf_source_data;                                // nios_cpu_jtag_debug_module_agent:rf_source_data -> nios_cpu_jtag_debug_module_agent_rsp_fifo:in_data
	wire          nios_cpu_jtag_debug_module_agent_rf_source_ready;                               // nios_cpu_jtag_debug_module_agent_rsp_fifo:in_ready -> nios_cpu_jtag_debug_module_agent:rf_source_ready
	wire          nios_cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // nios_cpu_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios_cpu_jtag_debug_module_agent:rf_sink_endofpacket
	wire          nios_cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                            // nios_cpu_jtag_debug_module_agent_rsp_fifo:out_valid -> nios_cpu_jtag_debug_module_agent:rf_sink_valid
	wire          nios_cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // nios_cpu_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios_cpu_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [108:0] nios_cpu_jtag_debug_module_agent_rsp_fifo_out_data;                             // nios_cpu_jtag_debug_module_agent_rsp_fifo:out_data -> nios_cpu_jtag_debug_module_agent:rf_sink_data
	wire          nios_cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                            // nios_cpu_jtag_debug_module_agent:rf_sink_ready -> nios_cpu_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          nios_cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                          // nios_cpu_jtag_debug_module_agent:rdata_fifo_src_valid -> nios_cpu_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] nios_cpu_jtag_debug_module_agent_rdata_fifo_src_data;                           // nios_cpu_jtag_debug_module_agent:rdata_fifo_src_data -> nios_cpu_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          nios_cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                          // nios_cpu_jtag_debug_module_agent:rdata_fifo_sink_ready -> nios_cpu_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          onchip_mem_s1_agent_m0_waitrequest;                                             // onchip_mem_s1_translator:uav_waitrequest -> onchip_mem_s1_agent:m0_waitrequest
	wire    [2:0] onchip_mem_s1_agent_m0_burstcount;                                              // onchip_mem_s1_agent:m0_burstcount -> onchip_mem_s1_translator:uav_burstcount
	wire   [31:0] onchip_mem_s1_agent_m0_writedata;                                               // onchip_mem_s1_agent:m0_writedata -> onchip_mem_s1_translator:uav_writedata
	wire   [27:0] onchip_mem_s1_agent_m0_address;                                                 // onchip_mem_s1_agent:m0_address -> onchip_mem_s1_translator:uav_address
	wire          onchip_mem_s1_agent_m0_write;                                                   // onchip_mem_s1_agent:m0_write -> onchip_mem_s1_translator:uav_write
	wire          onchip_mem_s1_agent_m0_lock;                                                    // onchip_mem_s1_agent:m0_lock -> onchip_mem_s1_translator:uav_lock
	wire          onchip_mem_s1_agent_m0_read;                                                    // onchip_mem_s1_agent:m0_read -> onchip_mem_s1_translator:uav_read
	wire   [31:0] onchip_mem_s1_agent_m0_readdata;                                                // onchip_mem_s1_translator:uav_readdata -> onchip_mem_s1_agent:m0_readdata
	wire          onchip_mem_s1_agent_m0_readdatavalid;                                           // onchip_mem_s1_translator:uav_readdatavalid -> onchip_mem_s1_agent:m0_readdatavalid
	wire          onchip_mem_s1_agent_m0_debugaccess;                                             // onchip_mem_s1_agent:m0_debugaccess -> onchip_mem_s1_translator:uav_debugaccess
	wire    [3:0] onchip_mem_s1_agent_m0_byteenable;                                              // onchip_mem_s1_agent:m0_byteenable -> onchip_mem_s1_translator:uav_byteenable
	wire          onchip_mem_s1_agent_rf_source_endofpacket;                                      // onchip_mem_s1_agent:rf_source_endofpacket -> onchip_mem_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_mem_s1_agent_rf_source_valid;                                            // onchip_mem_s1_agent:rf_source_valid -> onchip_mem_s1_agent_rsp_fifo:in_valid
	wire          onchip_mem_s1_agent_rf_source_startofpacket;                                    // onchip_mem_s1_agent:rf_source_startofpacket -> onchip_mem_s1_agent_rsp_fifo:in_startofpacket
	wire  [108:0] onchip_mem_s1_agent_rf_source_data;                                             // onchip_mem_s1_agent:rf_source_data -> onchip_mem_s1_agent_rsp_fifo:in_data
	wire          onchip_mem_s1_agent_rf_source_ready;                                            // onchip_mem_s1_agent_rsp_fifo:in_ready -> onchip_mem_s1_agent:rf_source_ready
	wire          onchip_mem_s1_agent_rsp_fifo_out_endofpacket;                                   // onchip_mem_s1_agent_rsp_fifo:out_endofpacket -> onchip_mem_s1_agent:rf_sink_endofpacket
	wire          onchip_mem_s1_agent_rsp_fifo_out_valid;                                         // onchip_mem_s1_agent_rsp_fifo:out_valid -> onchip_mem_s1_agent:rf_sink_valid
	wire          onchip_mem_s1_agent_rsp_fifo_out_startofpacket;                                 // onchip_mem_s1_agent_rsp_fifo:out_startofpacket -> onchip_mem_s1_agent:rf_sink_startofpacket
	wire  [108:0] onchip_mem_s1_agent_rsp_fifo_out_data;                                          // onchip_mem_s1_agent_rsp_fifo:out_data -> onchip_mem_s1_agent:rf_sink_data
	wire          onchip_mem_s1_agent_rsp_fifo_out_ready;                                         // onchip_mem_s1_agent:rf_sink_ready -> onchip_mem_s1_agent_rsp_fifo:out_ready
	wire          onchip_mem_s1_agent_rdata_fifo_src_valid;                                       // onchip_mem_s1_agent:rdata_fifo_src_valid -> onchip_mem_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] onchip_mem_s1_agent_rdata_fifo_src_data;                                        // onchip_mem_s1_agent:rdata_fifo_src_data -> onchip_mem_s1_agent:rdata_fifo_sink_data
	wire          onchip_mem_s1_agent_rdata_fifo_src_ready;                                       // onchip_mem_s1_agent:rdata_fifo_sink_ready -> onchip_mem_s1_agent:rdata_fifo_src_ready
	wire          ddr3_control_avl_0_agent_m0_waitrequest;                                        // ddr3_control_avl_0_translator:uav_waitrequest -> ddr3_control_avl_0_agent:m0_waitrequest
	wire    [4:0] ddr3_control_avl_0_agent_m0_burstcount;                                         // ddr3_control_avl_0_agent:m0_burstcount -> ddr3_control_avl_0_translator:uav_burstcount
	wire   [31:0] ddr3_control_avl_0_agent_m0_writedata;                                          // ddr3_control_avl_0_agent:m0_writedata -> ddr3_control_avl_0_translator:uav_writedata
	wire   [27:0] ddr3_control_avl_0_agent_m0_address;                                            // ddr3_control_avl_0_agent:m0_address -> ddr3_control_avl_0_translator:uav_address
	wire          ddr3_control_avl_0_agent_m0_write;                                              // ddr3_control_avl_0_agent:m0_write -> ddr3_control_avl_0_translator:uav_write
	wire          ddr3_control_avl_0_agent_m0_lock;                                               // ddr3_control_avl_0_agent:m0_lock -> ddr3_control_avl_0_translator:uav_lock
	wire          ddr3_control_avl_0_agent_m0_read;                                               // ddr3_control_avl_0_agent:m0_read -> ddr3_control_avl_0_translator:uav_read
	wire   [31:0] ddr3_control_avl_0_agent_m0_readdata;                                           // ddr3_control_avl_0_translator:uav_readdata -> ddr3_control_avl_0_agent:m0_readdata
	wire          ddr3_control_avl_0_agent_m0_readdatavalid;                                      // ddr3_control_avl_0_translator:uav_readdatavalid -> ddr3_control_avl_0_agent:m0_readdatavalid
	wire          ddr3_control_avl_0_agent_m0_debugaccess;                                        // ddr3_control_avl_0_agent:m0_debugaccess -> ddr3_control_avl_0_translator:uav_debugaccess
	wire    [3:0] ddr3_control_avl_0_agent_m0_byteenable;                                         // ddr3_control_avl_0_agent:m0_byteenable -> ddr3_control_avl_0_translator:uav_byteenable
	wire          ddr3_control_avl_0_agent_rf_source_endofpacket;                                 // ddr3_control_avl_0_agent:rf_source_endofpacket -> ddr3_control_avl_0_agent_rsp_fifo:in_endofpacket
	wire          ddr3_control_avl_0_agent_rf_source_valid;                                       // ddr3_control_avl_0_agent:rf_source_valid -> ddr3_control_avl_0_agent_rsp_fifo:in_valid
	wire          ddr3_control_avl_0_agent_rf_source_startofpacket;                               // ddr3_control_avl_0_agent:rf_source_startofpacket -> ddr3_control_avl_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] ddr3_control_avl_0_agent_rf_source_data;                                        // ddr3_control_avl_0_agent:rf_source_data -> ddr3_control_avl_0_agent_rsp_fifo:in_data
	wire          ddr3_control_avl_0_agent_rf_source_ready;                                       // ddr3_control_avl_0_agent_rsp_fifo:in_ready -> ddr3_control_avl_0_agent:rf_source_ready
	wire          ddr3_control_avl_0_agent_rsp_fifo_out_endofpacket;                              // ddr3_control_avl_0_agent_rsp_fifo:out_endofpacket -> ddr3_control_avl_0_agent:rf_sink_endofpacket
	wire          ddr3_control_avl_0_agent_rsp_fifo_out_valid;                                    // ddr3_control_avl_0_agent_rsp_fifo:out_valid -> ddr3_control_avl_0_agent:rf_sink_valid
	wire          ddr3_control_avl_0_agent_rsp_fifo_out_startofpacket;                            // ddr3_control_avl_0_agent_rsp_fifo:out_startofpacket -> ddr3_control_avl_0_agent:rf_sink_startofpacket
	wire  [108:0] ddr3_control_avl_0_agent_rsp_fifo_out_data;                                     // ddr3_control_avl_0_agent_rsp_fifo:out_data -> ddr3_control_avl_0_agent:rf_sink_data
	wire          ddr3_control_avl_0_agent_rsp_fifo_out_ready;                                    // ddr3_control_avl_0_agent:rf_sink_ready -> ddr3_control_avl_0_agent_rsp_fifo:out_ready
	wire          ddr3_control_avl_0_agent_rdata_fifo_src_valid;                                  // ddr3_control_avl_0_agent:rdata_fifo_src_valid -> ddr3_control_avl_0_agent:rdata_fifo_sink_valid
	wire   [33:0] ddr3_control_avl_0_agent_rdata_fifo_src_data;                                   // ddr3_control_avl_0_agent:rdata_fifo_src_data -> ddr3_control_avl_0_agent:rdata_fifo_sink_data
	wire          ddr3_control_avl_0_agent_rdata_fifo_src_ready;                                  // ddr3_control_avl_0_agent:rdata_fifo_sink_ready -> ddr3_control_avl_0_agent:rdata_fifo_src_ready
	wire          mm_bridge_0_s0_agent_m0_waitrequest;                                            // mm_bridge_0_s0_translator:uav_waitrequest -> mm_bridge_0_s0_agent:m0_waitrequest
	wire    [2:0] mm_bridge_0_s0_agent_m0_burstcount;                                             // mm_bridge_0_s0_agent:m0_burstcount -> mm_bridge_0_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_0_s0_agent_m0_writedata;                                              // mm_bridge_0_s0_agent:m0_writedata -> mm_bridge_0_s0_translator:uav_writedata
	wire   [27:0] mm_bridge_0_s0_agent_m0_address;                                                // mm_bridge_0_s0_agent:m0_address -> mm_bridge_0_s0_translator:uav_address
	wire          mm_bridge_0_s0_agent_m0_write;                                                  // mm_bridge_0_s0_agent:m0_write -> mm_bridge_0_s0_translator:uav_write
	wire          mm_bridge_0_s0_agent_m0_lock;                                                   // mm_bridge_0_s0_agent:m0_lock -> mm_bridge_0_s0_translator:uav_lock
	wire          mm_bridge_0_s0_agent_m0_read;                                                   // mm_bridge_0_s0_agent:m0_read -> mm_bridge_0_s0_translator:uav_read
	wire   [31:0] mm_bridge_0_s0_agent_m0_readdata;                                               // mm_bridge_0_s0_translator:uav_readdata -> mm_bridge_0_s0_agent:m0_readdata
	wire          mm_bridge_0_s0_agent_m0_readdatavalid;                                          // mm_bridge_0_s0_translator:uav_readdatavalid -> mm_bridge_0_s0_agent:m0_readdatavalid
	wire          mm_bridge_0_s0_agent_m0_debugaccess;                                            // mm_bridge_0_s0_agent:m0_debugaccess -> mm_bridge_0_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_0_s0_agent_m0_byteenable;                                             // mm_bridge_0_s0_agent:m0_byteenable -> mm_bridge_0_s0_translator:uav_byteenable
	wire          mm_bridge_0_s0_agent_rf_source_endofpacket;                                     // mm_bridge_0_s0_agent:rf_source_endofpacket -> mm_bridge_0_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_0_s0_agent_rf_source_valid;                                           // mm_bridge_0_s0_agent:rf_source_valid -> mm_bridge_0_s0_agent_rsp_fifo:in_valid
	wire          mm_bridge_0_s0_agent_rf_source_startofpacket;                                   // mm_bridge_0_s0_agent:rf_source_startofpacket -> mm_bridge_0_s0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] mm_bridge_0_s0_agent_rf_source_data;                                            // mm_bridge_0_s0_agent:rf_source_data -> mm_bridge_0_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_0_s0_agent_rf_source_ready;                                           // mm_bridge_0_s0_agent_rsp_fifo:in_ready -> mm_bridge_0_s0_agent:rf_source_ready
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket;                                  // mm_bridge_0_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_0_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_valid;                                        // mm_bridge_0_s0_agent_rsp_fifo:out_valid -> mm_bridge_0_s0_agent:rf_sink_valid
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket;                                // mm_bridge_0_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_0_s0_agent:rf_sink_startofpacket
	wire  [108:0] mm_bridge_0_s0_agent_rsp_fifo_out_data;                                         // mm_bridge_0_s0_agent_rsp_fifo:out_data -> mm_bridge_0_s0_agent:rf_sink_data
	wire          mm_bridge_0_s0_agent_rsp_fifo_out_ready;                                        // mm_bridge_0_s0_agent:rf_sink_ready -> mm_bridge_0_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_0_s0_agent_rdata_fifo_src_valid;                                      // mm_bridge_0_s0_agent:rdata_fifo_src_valid -> mm_bridge_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_0_s0_agent_rdata_fifo_src_data;                                       // mm_bridge_0_s0_agent:rdata_fifo_src_data -> mm_bridge_0_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_0_s0_agent_rdata_fifo_src_ready;                                      // mm_bridge_0_s0_agent:rdata_fifo_sink_ready -> mm_bridge_0_s0_agent:rdata_fifo_src_ready
	wire          nios_cpu_instruction_master_agent_cp_endofpacket;                               // nios_cpu_instruction_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          nios_cpu_instruction_master_agent_cp_valid;                                     // nios_cpu_instruction_master_agent:cp_valid -> router:sink_valid
	wire          nios_cpu_instruction_master_agent_cp_startofpacket;                             // nios_cpu_instruction_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [107:0] nios_cpu_instruction_master_agent_cp_data;                                      // nios_cpu_instruction_master_agent:cp_data -> router:sink_data
	wire          nios_cpu_instruction_master_agent_cp_ready;                                     // router:sink_ready -> nios_cpu_instruction_master_agent:cp_ready
	wire          nios_cpu_data_master_agent_cp_endofpacket;                                      // nios_cpu_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          nios_cpu_data_master_agent_cp_valid;                                            // nios_cpu_data_master_agent:cp_valid -> router_001:sink_valid
	wire          nios_cpu_data_master_agent_cp_startofpacket;                                    // nios_cpu_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [107:0] nios_cpu_data_master_agent_cp_data;                                             // nios_cpu_data_master_agent:cp_data -> router_001:sink_data
	wire          nios_cpu_data_master_agent_cp_ready;                                            // router_001:sink_ready -> nios_cpu_data_master_agent:cp_ready
	wire          nios_cpu_jtag_debug_module_agent_rp_endofpacket;                                // nios_cpu_jtag_debug_module_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          nios_cpu_jtag_debug_module_agent_rp_valid;                                      // nios_cpu_jtag_debug_module_agent:rp_valid -> router_002:sink_valid
	wire          nios_cpu_jtag_debug_module_agent_rp_startofpacket;                              // nios_cpu_jtag_debug_module_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [107:0] nios_cpu_jtag_debug_module_agent_rp_data;                                       // nios_cpu_jtag_debug_module_agent:rp_data -> router_002:sink_data
	wire          nios_cpu_jtag_debug_module_agent_rp_ready;                                      // router_002:sink_ready -> nios_cpu_jtag_debug_module_agent:rp_ready
	wire          router_002_src_endofpacket;                                                     // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                           // router_002:src_valid -> rsp_demux:sink_valid
	wire          router_002_src_startofpacket;                                                   // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [107:0] router_002_src_data;                                                            // router_002:src_data -> rsp_demux:sink_data
	wire    [3:0] router_002_src_channel;                                                         // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_ready;                                                           // rsp_demux:sink_ready -> router_002:src_ready
	wire          onchip_mem_s1_agent_rp_endofpacket;                                             // onchip_mem_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          onchip_mem_s1_agent_rp_valid;                                                   // onchip_mem_s1_agent:rp_valid -> router_003:sink_valid
	wire          onchip_mem_s1_agent_rp_startofpacket;                                           // onchip_mem_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [107:0] onchip_mem_s1_agent_rp_data;                                                    // onchip_mem_s1_agent:rp_data -> router_003:sink_data
	wire          onchip_mem_s1_agent_rp_ready;                                                   // router_003:sink_ready -> onchip_mem_s1_agent:rp_ready
	wire          router_003_src_endofpacket;                                                     // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                                           // router_003:src_valid -> rsp_demux_001:sink_valid
	wire          router_003_src_startofpacket;                                                   // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [107:0] router_003_src_data;                                                            // router_003:src_data -> rsp_demux_001:sink_data
	wire    [3:0] router_003_src_channel;                                                         // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_ready;                                                           // rsp_demux_001:sink_ready -> router_003:src_ready
	wire          ddr3_control_avl_0_agent_rp_endofpacket;                                        // ddr3_control_avl_0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          ddr3_control_avl_0_agent_rp_valid;                                              // ddr3_control_avl_0_agent:rp_valid -> router_004:sink_valid
	wire          ddr3_control_avl_0_agent_rp_startofpacket;                                      // ddr3_control_avl_0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [107:0] ddr3_control_avl_0_agent_rp_data;                                               // ddr3_control_avl_0_agent:rp_data -> router_004:sink_data
	wire          ddr3_control_avl_0_agent_rp_ready;                                              // router_004:sink_ready -> ddr3_control_avl_0_agent:rp_ready
	wire          router_004_src_endofpacket;                                                     // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                                           // router_004:src_valid -> rsp_demux_002:sink_valid
	wire          router_004_src_startofpacket;                                                   // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [107:0] router_004_src_data;                                                            // router_004:src_data -> rsp_demux_002:sink_data
	wire    [3:0] router_004_src_channel;                                                         // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_ready;                                                           // rsp_demux_002:sink_ready -> router_004:src_ready
	wire          mm_bridge_0_s0_agent_rp_endofpacket;                                            // mm_bridge_0_s0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          mm_bridge_0_s0_agent_rp_valid;                                                  // mm_bridge_0_s0_agent:rp_valid -> router_005:sink_valid
	wire          mm_bridge_0_s0_agent_rp_startofpacket;                                          // mm_bridge_0_s0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [107:0] mm_bridge_0_s0_agent_rp_data;                                                   // mm_bridge_0_s0_agent:rp_data -> router_005:sink_data
	wire          mm_bridge_0_s0_agent_rp_ready;                                                  // router_005:sink_ready -> mm_bridge_0_s0_agent:rp_ready
	wire          router_005_src_endofpacket;                                                     // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_005_src_valid;                                                           // router_005:src_valid -> rsp_demux_003:sink_valid
	wire          router_005_src_startofpacket;                                                   // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [107:0] router_005_src_data;                                                            // router_005:src_data -> rsp_demux_003:sink_data
	wire    [3:0] router_005_src_channel;                                                         // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_ready;                                                           // rsp_demux_003:sink_ready -> router_005:src_ready
	wire          router_src_endofpacket;                                                         // router:src_endofpacket -> nios_cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                               // router:src_valid -> nios_cpu_instruction_master_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                                       // router:src_startofpacket -> nios_cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire  [107:0] router_src_data;                                                                // router:src_data -> nios_cpu_instruction_master_limiter:cmd_sink_data
	wire    [3:0] router_src_channel;                                                             // router:src_channel -> nios_cpu_instruction_master_limiter:cmd_sink_channel
	wire          router_src_ready;                                                               // nios_cpu_instruction_master_limiter:cmd_sink_ready -> router:src_ready
	wire          nios_cpu_instruction_master_limiter_cmd_src_endofpacket;                        // nios_cpu_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios_cpu_instruction_master_limiter_cmd_src_startofpacket;                      // nios_cpu_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [107:0] nios_cpu_instruction_master_limiter_cmd_src_data;                               // nios_cpu_instruction_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire    [3:0] nios_cpu_instruction_master_limiter_cmd_src_channel;                            // nios_cpu_instruction_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          nios_cpu_instruction_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> nios_cpu_instruction_master_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                                        // rsp_mux:src_endofpacket -> nios_cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                              // rsp_mux:src_valid -> nios_cpu_instruction_master_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                                      // rsp_mux:src_startofpacket -> nios_cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire  [107:0] rsp_mux_src_data;                                                               // rsp_mux:src_data -> nios_cpu_instruction_master_limiter:rsp_sink_data
	wire    [3:0] rsp_mux_src_channel;                                                            // rsp_mux:src_channel -> nios_cpu_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                              // nios_cpu_instruction_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          nios_cpu_instruction_master_limiter_rsp_src_endofpacket;                        // nios_cpu_instruction_master_limiter:rsp_src_endofpacket -> nios_cpu_instruction_master_agent:rp_endofpacket
	wire          nios_cpu_instruction_master_limiter_rsp_src_valid;                              // nios_cpu_instruction_master_limiter:rsp_src_valid -> nios_cpu_instruction_master_agent:rp_valid
	wire          nios_cpu_instruction_master_limiter_rsp_src_startofpacket;                      // nios_cpu_instruction_master_limiter:rsp_src_startofpacket -> nios_cpu_instruction_master_agent:rp_startofpacket
	wire  [107:0] nios_cpu_instruction_master_limiter_rsp_src_data;                               // nios_cpu_instruction_master_limiter:rsp_src_data -> nios_cpu_instruction_master_agent:rp_data
	wire    [3:0] nios_cpu_instruction_master_limiter_rsp_src_channel;                            // nios_cpu_instruction_master_limiter:rsp_src_channel -> nios_cpu_instruction_master_agent:rp_channel
	wire          nios_cpu_instruction_master_limiter_rsp_src_ready;                              // nios_cpu_instruction_master_agent:rp_ready -> nios_cpu_instruction_master_limiter:rsp_src_ready
	wire          router_001_src_endofpacket;                                                     // router_001:src_endofpacket -> nios_cpu_data_master_limiter:cmd_sink_endofpacket
	wire          router_001_src_valid;                                                           // router_001:src_valid -> nios_cpu_data_master_limiter:cmd_sink_valid
	wire          router_001_src_startofpacket;                                                   // router_001:src_startofpacket -> nios_cpu_data_master_limiter:cmd_sink_startofpacket
	wire  [107:0] router_001_src_data;                                                            // router_001:src_data -> nios_cpu_data_master_limiter:cmd_sink_data
	wire    [3:0] router_001_src_channel;                                                         // router_001:src_channel -> nios_cpu_data_master_limiter:cmd_sink_channel
	wire          router_001_src_ready;                                                           // nios_cpu_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire          nios_cpu_data_master_limiter_cmd_src_endofpacket;                               // nios_cpu_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          nios_cpu_data_master_limiter_cmd_src_startofpacket;                             // nios_cpu_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [107:0] nios_cpu_data_master_limiter_cmd_src_data;                                      // nios_cpu_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire    [3:0] nios_cpu_data_master_limiter_cmd_src_channel;                                   // nios_cpu_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios_cpu_data_master_limiter_cmd_src_ready;                                     // cmd_demux_001:sink_ready -> nios_cpu_data_master_limiter:cmd_src_ready
	wire          rsp_mux_001_src_endofpacket;                                                    // rsp_mux_001:src_endofpacket -> nios_cpu_data_master_limiter:rsp_sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                          // rsp_mux_001:src_valid -> nios_cpu_data_master_limiter:rsp_sink_valid
	wire          rsp_mux_001_src_startofpacket;                                                  // rsp_mux_001:src_startofpacket -> nios_cpu_data_master_limiter:rsp_sink_startofpacket
	wire  [107:0] rsp_mux_001_src_data;                                                           // rsp_mux_001:src_data -> nios_cpu_data_master_limiter:rsp_sink_data
	wire    [3:0] rsp_mux_001_src_channel;                                                        // rsp_mux_001:src_channel -> nios_cpu_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_ready;                                                          // nios_cpu_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire          nios_cpu_data_master_limiter_rsp_src_endofpacket;                               // nios_cpu_data_master_limiter:rsp_src_endofpacket -> nios_cpu_data_master_agent:rp_endofpacket
	wire          nios_cpu_data_master_limiter_rsp_src_valid;                                     // nios_cpu_data_master_limiter:rsp_src_valid -> nios_cpu_data_master_agent:rp_valid
	wire          nios_cpu_data_master_limiter_rsp_src_startofpacket;                             // nios_cpu_data_master_limiter:rsp_src_startofpacket -> nios_cpu_data_master_agent:rp_startofpacket
	wire  [107:0] nios_cpu_data_master_limiter_rsp_src_data;                                      // nios_cpu_data_master_limiter:rsp_src_data -> nios_cpu_data_master_agent:rp_data
	wire    [3:0] nios_cpu_data_master_limiter_rsp_src_channel;                                   // nios_cpu_data_master_limiter:rsp_src_channel -> nios_cpu_data_master_agent:rp_channel
	wire          nios_cpu_data_master_limiter_rsp_src_ready;                                     // nios_cpu_data_master_agent:rp_ready -> nios_cpu_data_master_limiter:rsp_src_ready
	wire          cmd_mux_src_endofpacket;                                                        // cmd_mux:src_endofpacket -> nios_cpu_jtag_debug_module_burst_adapter:sink0_endofpacket
	wire          cmd_mux_src_valid;                                                              // cmd_mux:src_valid -> nios_cpu_jtag_debug_module_burst_adapter:sink0_valid
	wire          cmd_mux_src_startofpacket;                                                      // cmd_mux:src_startofpacket -> nios_cpu_jtag_debug_module_burst_adapter:sink0_startofpacket
	wire  [107:0] cmd_mux_src_data;                                                               // cmd_mux:src_data -> nios_cpu_jtag_debug_module_burst_adapter:sink0_data
	wire    [3:0] cmd_mux_src_channel;                                                            // cmd_mux:src_channel -> nios_cpu_jtag_debug_module_burst_adapter:sink0_channel
	wire          cmd_mux_src_ready;                                                              // nios_cpu_jtag_debug_module_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire          nios_cpu_jtag_debug_module_burst_adapter_source0_endofpacket;                   // nios_cpu_jtag_debug_module_burst_adapter:source0_endofpacket -> nios_cpu_jtag_debug_module_agent:cp_endofpacket
	wire          nios_cpu_jtag_debug_module_burst_adapter_source0_valid;                         // nios_cpu_jtag_debug_module_burst_adapter:source0_valid -> nios_cpu_jtag_debug_module_agent:cp_valid
	wire          nios_cpu_jtag_debug_module_burst_adapter_source0_startofpacket;                 // nios_cpu_jtag_debug_module_burst_adapter:source0_startofpacket -> nios_cpu_jtag_debug_module_agent:cp_startofpacket
	wire  [107:0] nios_cpu_jtag_debug_module_burst_adapter_source0_data;                          // nios_cpu_jtag_debug_module_burst_adapter:source0_data -> nios_cpu_jtag_debug_module_agent:cp_data
	wire          nios_cpu_jtag_debug_module_burst_adapter_source0_ready;                         // nios_cpu_jtag_debug_module_agent:cp_ready -> nios_cpu_jtag_debug_module_burst_adapter:source0_ready
	wire    [3:0] nios_cpu_jtag_debug_module_burst_adapter_source0_channel;                       // nios_cpu_jtag_debug_module_burst_adapter:source0_channel -> nios_cpu_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_001_src_endofpacket;                                                    // cmd_mux_001:src_endofpacket -> onchip_mem_s1_burst_adapter:sink0_endofpacket
	wire          cmd_mux_001_src_valid;                                                          // cmd_mux_001:src_valid -> onchip_mem_s1_burst_adapter:sink0_valid
	wire          cmd_mux_001_src_startofpacket;                                                  // cmd_mux_001:src_startofpacket -> onchip_mem_s1_burst_adapter:sink0_startofpacket
	wire  [107:0] cmd_mux_001_src_data;                                                           // cmd_mux_001:src_data -> onchip_mem_s1_burst_adapter:sink0_data
	wire    [3:0] cmd_mux_001_src_channel;                                                        // cmd_mux_001:src_channel -> onchip_mem_s1_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_ready;                                                          // onchip_mem_s1_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire          onchip_mem_s1_burst_adapter_source0_endofpacket;                                // onchip_mem_s1_burst_adapter:source0_endofpacket -> onchip_mem_s1_agent:cp_endofpacket
	wire          onchip_mem_s1_burst_adapter_source0_valid;                                      // onchip_mem_s1_burst_adapter:source0_valid -> onchip_mem_s1_agent:cp_valid
	wire          onchip_mem_s1_burst_adapter_source0_startofpacket;                              // onchip_mem_s1_burst_adapter:source0_startofpacket -> onchip_mem_s1_agent:cp_startofpacket
	wire  [107:0] onchip_mem_s1_burst_adapter_source0_data;                                       // onchip_mem_s1_burst_adapter:source0_data -> onchip_mem_s1_agent:cp_data
	wire          onchip_mem_s1_burst_adapter_source0_ready;                                      // onchip_mem_s1_agent:cp_ready -> onchip_mem_s1_burst_adapter:source0_ready
	wire    [3:0] onchip_mem_s1_burst_adapter_source0_channel;                                    // onchip_mem_s1_burst_adapter:source0_channel -> onchip_mem_s1_agent:cp_channel
	wire          cmd_mux_002_src_endofpacket;                                                    // cmd_mux_002:src_endofpacket -> ddr3_control_avl_0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                          // cmd_mux_002:src_valid -> ddr3_control_avl_0_burst_adapter:sink0_valid
	wire          cmd_mux_002_src_startofpacket;                                                  // cmd_mux_002:src_startofpacket -> ddr3_control_avl_0_burst_adapter:sink0_startofpacket
	wire  [107:0] cmd_mux_002_src_data;                                                           // cmd_mux_002:src_data -> ddr3_control_avl_0_burst_adapter:sink0_data
	wire    [3:0] cmd_mux_002_src_channel;                                                        // cmd_mux_002:src_channel -> ddr3_control_avl_0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_ready;                                                          // ddr3_control_avl_0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire          ddr3_control_avl_0_burst_adapter_source0_endofpacket;                           // ddr3_control_avl_0_burst_adapter:source0_endofpacket -> ddr3_control_avl_0_agent:cp_endofpacket
	wire          ddr3_control_avl_0_burst_adapter_source0_valid;                                 // ddr3_control_avl_0_burst_adapter:source0_valid -> ddr3_control_avl_0_agent:cp_valid
	wire          ddr3_control_avl_0_burst_adapter_source0_startofpacket;                         // ddr3_control_avl_0_burst_adapter:source0_startofpacket -> ddr3_control_avl_0_agent:cp_startofpacket
	wire  [107:0] ddr3_control_avl_0_burst_adapter_source0_data;                                  // ddr3_control_avl_0_burst_adapter:source0_data -> ddr3_control_avl_0_agent:cp_data
	wire          ddr3_control_avl_0_burst_adapter_source0_ready;                                 // ddr3_control_avl_0_agent:cp_ready -> ddr3_control_avl_0_burst_adapter:source0_ready
	wire    [3:0] ddr3_control_avl_0_burst_adapter_source0_channel;                               // ddr3_control_avl_0_burst_adapter:source0_channel -> ddr3_control_avl_0_agent:cp_channel
	wire          cmd_mux_003_src_endofpacket;                                                    // cmd_mux_003:src_endofpacket -> mm_bridge_0_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                          // cmd_mux_003:src_valid -> mm_bridge_0_s0_burst_adapter:sink0_valid
	wire          cmd_mux_003_src_startofpacket;                                                  // cmd_mux_003:src_startofpacket -> mm_bridge_0_s0_burst_adapter:sink0_startofpacket
	wire  [107:0] cmd_mux_003_src_data;                                                           // cmd_mux_003:src_data -> mm_bridge_0_s0_burst_adapter:sink0_data
	wire    [3:0] cmd_mux_003_src_channel;                                                        // cmd_mux_003:src_channel -> mm_bridge_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_ready;                                                          // mm_bridge_0_s0_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire          mm_bridge_0_s0_burst_adapter_source0_endofpacket;                               // mm_bridge_0_s0_burst_adapter:source0_endofpacket -> mm_bridge_0_s0_agent:cp_endofpacket
	wire          mm_bridge_0_s0_burst_adapter_source0_valid;                                     // mm_bridge_0_s0_burst_adapter:source0_valid -> mm_bridge_0_s0_agent:cp_valid
	wire          mm_bridge_0_s0_burst_adapter_source0_startofpacket;                             // mm_bridge_0_s0_burst_adapter:source0_startofpacket -> mm_bridge_0_s0_agent:cp_startofpacket
	wire  [107:0] mm_bridge_0_s0_burst_adapter_source0_data;                                      // mm_bridge_0_s0_burst_adapter:source0_data -> mm_bridge_0_s0_agent:cp_data
	wire          mm_bridge_0_s0_burst_adapter_source0_ready;                                     // mm_bridge_0_s0_agent:cp_ready -> mm_bridge_0_s0_burst_adapter:source0_ready
	wire    [3:0] mm_bridge_0_s0_burst_adapter_source0_channel;                                   // mm_bridge_0_s0_burst_adapter:source0_channel -> mm_bridge_0_s0_agent:cp_channel
	wire          cmd_demux_src0_endofpacket;                                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [107:0] cmd_demux_src0_data;                                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire    [3:0] cmd_demux_src0_channel;                                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                                     // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                           // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                                   // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [107:0] cmd_demux_src1_data;                                                            // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire    [3:0] cmd_demux_src1_channel;                                                         // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                                           // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          cmd_demux_src2_endofpacket;                                                     // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                           // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_src2_startofpacket;                                                   // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [107:0] cmd_demux_src2_data;                                                            // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire    [3:0] cmd_demux_src2_channel;                                                         // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_ready;                                                           // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire          cmd_demux_001_src0_endofpacket;                                                 // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src0_valid;                                                       // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire          cmd_demux_001_src0_startofpacket;                                               // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [107:0] cmd_demux_001_src0_data;                                                        // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire    [3:0] cmd_demux_001_src0_channel;                                                     // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_ready;                                                       // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire          cmd_demux_001_src1_endofpacket;                                                 // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                       // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire          cmd_demux_001_src1_startofpacket;                                               // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire  [107:0] cmd_demux_001_src1_data;                                                        // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire    [3:0] cmd_demux_001_src1_channel;                                                     // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_ready;                                                       // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire          cmd_demux_001_src2_endofpacket;                                                 // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                       // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire          cmd_demux_001_src2_startofpacket;                                               // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire  [107:0] cmd_demux_001_src2_data;                                                        // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire    [3:0] cmd_demux_001_src2_channel;                                                     // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_ready;                                                       // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire          cmd_demux_001_src3_endofpacket;                                                 // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                       // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire          cmd_demux_001_src3_startofpacket;                                               // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [107:0] cmd_demux_001_src3_data;                                                        // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire    [3:0] cmd_demux_001_src3_channel;                                                     // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_ready;                                                       // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire          rsp_demux_src0_endofpacket;                                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [107:0] rsp_demux_src0_data;                                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire    [3:0] rsp_demux_src0_channel;                                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_src1_endofpacket;                                                     // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                           // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire          rsp_demux_src1_startofpacket;                                                   // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [107:0] rsp_demux_src1_data;                                                            // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire    [3:0] rsp_demux_src1_channel;                                                         // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire          rsp_demux_001_src0_endofpacket;                                                 // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                       // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                               // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [107:0] rsp_demux_001_src0_data;                                                        // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire    [3:0] rsp_demux_001_src0_channel;                                                     // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                                       // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_001_src1_endofpacket;                                                 // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                       // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire          rsp_demux_001_src1_startofpacket;                                               // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [107:0] rsp_demux_001_src1_data;                                                        // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire    [3:0] rsp_demux_001_src1_channel;                                                     // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_ready;                                                       // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire          rsp_demux_002_src0_endofpacket;                                                 // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                       // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                               // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [107:0] rsp_demux_002_src0_data;                                                        // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire    [3:0] rsp_demux_002_src0_channel;                                                     // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_ready;                                                       // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_002_src1_endofpacket;                                                 // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                       // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire          rsp_demux_002_src1_startofpacket;                                               // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [107:0] rsp_demux_002_src1_data;                                                        // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire    [3:0] rsp_demux_002_src1_channel;                                                     // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_ready;                                                       // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire          rsp_demux_003_src0_endofpacket;                                                 // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src0_valid;                                                       // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire          rsp_demux_003_src0_startofpacket;                                               // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [107:0] rsp_demux_003_src0_data;                                                        // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire    [3:0] rsp_demux_003_src0_channel;                                                     // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_ready;                                                       // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] nios_cpu_instruction_master_limiter_cmd_valid_data;                             // nios_cpu_instruction_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [3:0] nios_cpu_data_master_limiter_cmd_valid_data;                                    // nios_cpu_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_cpu_instruction_master_translator (
		.clk                      (syspll_outclk0_clk),                                                             //                       clk.clk
		.reset                    (nios_cpu_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (nios_cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios_cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios_cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios_cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios_cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios_cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (nios_cpu_instruction_master_burstcount),                                         //                          .burstcount
		.av_read                  (nios_cpu_instruction_master_read),                                               //                          .read
		.av_readdata              (nios_cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (nios_cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_byteenable            (4'b1111),                                                                        //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                           //               (terminated)
		.av_begintransfer         (1'b0),                                                                           //               (terminated)
		.av_chipselect            (1'b0),                                                                           //               (terminated)
		.av_write                 (1'b0),                                                                           //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                           //               (terminated)
		.av_lock                  (1'b0),                                                                           //               (terminated)
		.av_debugaccess           (1'b0),                                                                           //               (terminated)
		.uav_clken                (),                                                                               //               (terminated)
		.av_clken                 (1'b1),                                                                           //               (terminated)
		.uav_response             (2'b00),                                                                          //               (terminated)
		.av_response              (),                                                                               //               (terminated)
		.uav_writeresponserequest (),                                                                               //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                           //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid    ()                                                                                //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (28),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_cpu_data_master_translator (
		.clk                      (syspll_outclk0_clk),                                                      //                       clk.clk
		.reset                    (nios_cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (nios_cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (nios_cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (nios_cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (nios_cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (nios_cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (nios_cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (nios_cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (nios_cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (nios_cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (nios_cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (nios_cpu_data_master_burstcount),                                         //                          .burstcount
		.av_byteenable            (nios_cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (nios_cpu_data_master_read),                                               //                          .read
		.av_readdata              (nios_cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (nios_cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (nios_cpu_data_master_write),                                              //                          .write
		.av_writedata             (nios_cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (nios_cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                    //               (terminated)
		.av_begintransfer         (1'b0),                                                                    //               (terminated)
		.av_chipselect            (1'b0),                                                                    //               (terminated)
		.av_lock                  (1'b0),                                                                    //               (terminated)
		.uav_clken                (),                                                                        //               (terminated)
		.av_clken                 (1'b1),                                                                    //               (terminated)
		.uav_response             (2'b00),                                                                   //               (terminated)
		.av_response              (),                                                                        //               (terminated)
		.uav_writeresponserequest (),                                                                        //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                    //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid    ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_cpu_jtag_debug_module_translator (
		.clk                      (syspll_outclk0_clk),                                //                      clk.clk
		.reset                    (nios_cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (nios_cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (nios_cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (nios_cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (nios_cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (nios_cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (nios_cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (nios_cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (nios_cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (nios_cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (nios_cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (nios_cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (nios_cpu_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (nios_cpu_jtag_debug_module_write),                  //                         .write
		.av_read                  (nios_cpu_jtag_debug_module_read),                   //                         .read
		.av_readdata              (nios_cpu_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (nios_cpu_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (nios_cpu_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (nios_cpu_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (nios_cpu_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                                  //              (terminated)
		.av_beginbursttransfer    (),                                                  //              (terminated)
		.av_burstcount            (),                                                  //              (terminated)
		.av_readdatavalid         (1'b0),                                              //              (terminated)
		.av_writebyteenable       (),                                                  //              (terminated)
		.av_lock                  (),                                                  //              (terminated)
		.av_chipselect            (),                                                  //              (terminated)
		.av_clken                 (),                                                  //              (terminated)
		.uav_clken                (1'b0),                                              //              (terminated)
		.av_outputenable          (),                                                  //              (terminated)
		.uav_response             (),                                                  //              (terminated)
		.av_response              (2'b00),                                             //              (terminated)
		.uav_writeresponserequest (1'b0),                                              //              (terminated)
		.uav_writeresponsevalid   (),                                                  //              (terminated)
		.av_writeresponserequest  (),                                                  //              (terminated)
		.av_writeresponsevalid    (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_mem_s1_translator (
		.clk                      (syspll_outclk0_clk),                           //                      clk.clk
		.reset                    (nios_cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (onchip_mem_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (onchip_mem_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (onchip_mem_s1_agent_m0_read),                  //                         .read
		.uav_write                (onchip_mem_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (onchip_mem_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (onchip_mem_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (onchip_mem_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (onchip_mem_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (onchip_mem_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (onchip_mem_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (onchip_mem_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (onchip_mem_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (onchip_mem_s1_write),                          //                         .write
		.av_readdata              (onchip_mem_s1_readdata),                       //                         .readdata
		.av_writedata             (onchip_mem_s1_writedata),                      //                         .writedata
		.av_byteenable            (onchip_mem_s1_byteenable),                     //                         .byteenable
		.av_chipselect            (onchip_mem_s1_chipselect),                     //                         .chipselect
		.av_clken                 (onchip_mem_s1_clken),                          //                         .clken
		.av_read                  (),                                             //              (terminated)
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_waitrequest           (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_debugaccess           (),                                             //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (3),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr3_control_avl_0_translator (
		.clk                      (syspll_outclk0_clk),                           //                      clk.clk
		.reset                    (nios_cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (ddr3_control_avl_0_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount           (ddr3_control_avl_0_agent_m0_burstcount),       //                         .burstcount
		.uav_read                 (ddr3_control_avl_0_agent_m0_read),             //                         .read
		.uav_write                (ddr3_control_avl_0_agent_m0_write),            //                         .write
		.uav_waitrequest          (ddr3_control_avl_0_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid        (ddr3_control_avl_0_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable           (ddr3_control_avl_0_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata             (ddr3_control_avl_0_agent_m0_readdata),         //                         .readdata
		.uav_writedata            (ddr3_control_avl_0_agent_m0_writedata),        //                         .writedata
		.uav_lock                 (ddr3_control_avl_0_agent_m0_lock),             //                         .lock
		.uav_debugaccess          (ddr3_control_avl_0_agent_m0_debugaccess),      //                         .debugaccess
		.av_address               (ddr3_control_avl_0_address),                   //      avalon_anti_slave_0.address
		.av_write                 (ddr3_control_avl_0_write),                     //                         .write
		.av_read                  (ddr3_control_avl_0_read),                      //                         .read
		.av_readdata              (ddr3_control_avl_0_readdata),                  //                         .readdata
		.av_writedata             (ddr3_control_avl_0_writedata),                 //                         .writedata
		.av_beginbursttransfer    (ddr3_control_avl_0_beginbursttransfer),        //                         .beginbursttransfer
		.av_burstcount            (ddr3_control_avl_0_burstcount),                //                         .burstcount
		.av_byteenable            (ddr3_control_avl_0_byteenable),                //                         .byteenable
		.av_readdatavalid         (ddr3_control_avl_0_readdatavalid),             //                         .readdatavalid
		.av_waitrequest           (ddr3_control_avl_0_waitrequest),               //                         .waitrequest
		.av_begintransfer         (),                                             //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.av_chipselect            (),                                             //              (terminated)
		.av_clken                 (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_debugaccess           (),                                             //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (28),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_0_s0_translator (
		.clk                      (syspll_outclk0_clk),                           //                      clk.clk
		.reset                    (nios_cpu_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_bridge_0_s0_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_0_s0_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (mm_bridge_0_s0_agent_m0_read),                 //                         .read
		.uav_write                (mm_bridge_0_s0_agent_m0_write),                //                         .write
		.uav_waitrequest          (mm_bridge_0_s0_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_0_s0_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (mm_bridge_0_s0_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (mm_bridge_0_s0_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (mm_bridge_0_s0_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (mm_bridge_0_s0_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (mm_bridge_0_s0_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (mm_bridge_0_s0_address),                       //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_0_s0_write),                         //                         .write
		.av_read                  (mm_bridge_0_s0_read),                          //                         .read
		.av_readdata              (mm_bridge_0_s0_readdata),                      //                         .readdata
		.av_writedata             (mm_bridge_0_s0_writedata),                     //                         .writedata
		.av_burstcount            (mm_bridge_0_s0_burstcount),                    //                         .burstcount
		.av_byteenable            (mm_bridge_0_s0_byteenable),                    //                         .byteenable
		.av_readdatavalid         (mm_bridge_0_s0_readdatavalid),                 //                         .readdatavalid
		.av_waitrequest           (mm_bridge_0_s0_waitrequest),                   //                         .waitrequest
		.av_debugaccess           (mm_bridge_0_s0_debugaccess),                   //                         .debugaccess
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.av_chipselect            (),                                             //              (terminated)
		.av_clken                 (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_TRANS_LOCK            (68),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (93),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (31),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_cpu_instruction_master_agent (
		.clk                     (syspll_outclk0_clk),                                                             //       clk.clk
		.reset                   (nios_cpu_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (nios_cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios_cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios_cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios_cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios_cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios_cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios_cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios_cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios_cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios_cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios_cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios_cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios_cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios_cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios_cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (nios_cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (nios_cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (nios_cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (nios_cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (nios_cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (nios_cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                               // (terminated)
		.av_writeresponserequest (1'b0),                                                                           // (terminated)
		.av_writeresponsevalid   ()                                                                                // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BEGIN_BURST           (89),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_TRANS_LOCK            (68),
		.PKT_TRANS_EXCLUSIVE       (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (93),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (63),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_cpu_data_master_agent (
		.clk                     (syspll_outclk0_clk),                                                      //       clk.clk
		.reset                   (nios_cpu_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (nios_cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (nios_cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (nios_cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (nios_cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (nios_cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (nios_cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (nios_cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (nios_cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (nios_cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (nios_cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (nios_cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (nios_cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (nios_cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (nios_cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (nios_cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (nios_cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (nios_cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (nios_cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (nios_cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (nios_cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (nios_cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (nios_cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                        // (terminated)
		.av_writeresponserequest (1'b0),                                                                    // (terminated)
		.av_writeresponsevalid   ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_TRANS_LOCK            (68),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_cpu_jtag_debug_module_agent (
		.clk                     (syspll_outclk0_clk),                                             //             clk.clk
		.reset                   (nios_cpu_reset_n_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (nios_cpu_jtag_debug_module_agent_m0_address),                    //              m0.address
		.m0_burstcount           (nios_cpu_jtag_debug_module_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (nios_cpu_jtag_debug_module_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (nios_cpu_jtag_debug_module_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (nios_cpu_jtag_debug_module_agent_m0_lock),                       //                .lock
		.m0_readdata             (nios_cpu_jtag_debug_module_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (nios_cpu_jtag_debug_module_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (nios_cpu_jtag_debug_module_agent_m0_read),                       //                .read
		.m0_waitrequest          (nios_cpu_jtag_debug_module_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (nios_cpu_jtag_debug_module_agent_m0_writedata),                  //                .writedata
		.m0_write                (nios_cpu_jtag_debug_module_agent_m0_write),                      //                .write
		.rp_endofpacket          (nios_cpu_jtag_debug_module_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (nios_cpu_jtag_debug_module_agent_rp_ready),                      //                .ready
		.rp_valid                (nios_cpu_jtag_debug_module_agent_rp_valid),                      //                .valid
		.rp_data                 (nios_cpu_jtag_debug_module_agent_rp_data),                       //                .data
		.rp_startofpacket        (nios_cpu_jtag_debug_module_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (nios_cpu_jtag_debug_module_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (nios_cpu_jtag_debug_module_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (nios_cpu_jtag_debug_module_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (nios_cpu_jtag_debug_module_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (nios_cpu_jtag_debug_module_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (nios_cpu_jtag_debug_module_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (nios_cpu_jtag_debug_module_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (nios_cpu_jtag_debug_module_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (nios_cpu_jtag_debug_module_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (nios_cpu_jtag_debug_module_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (nios_cpu_jtag_debug_module_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (nios_cpu_jtag_debug_module_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios_cpu_jtag_debug_module_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (nios_cpu_jtag_debug_module_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (nios_cpu_jtag_debug_module_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_cpu_jtag_debug_module_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (nios_cpu_jtag_debug_module_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponserequest (),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (syspll_outclk0_clk),                                          //       clk.clk
		.reset             (nios_cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios_cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios_cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_TRANS_LOCK            (68),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) onchip_mem_s1_agent (
		.clk                     (syspll_outclk0_clk),                                //             clk.clk
		.reset                   (nios_cpu_reset_n_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (onchip_mem_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (onchip_mem_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (onchip_mem_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (onchip_mem_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (onchip_mem_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (onchip_mem_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (onchip_mem_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (onchip_mem_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (onchip_mem_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (onchip_mem_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (onchip_mem_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (onchip_mem_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (onchip_mem_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (onchip_mem_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (onchip_mem_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (onchip_mem_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (onchip_mem_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (onchip_mem_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (onchip_mem_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (onchip_mem_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (onchip_mem_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (onchip_mem_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (onchip_mem_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (onchip_mem_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (onchip_mem_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (onchip_mem_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (onchip_mem_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (onchip_mem_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (onchip_mem_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (onchip_mem_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (onchip_mem_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (onchip_mem_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (onchip_mem_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (onchip_mem_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (onchip_mem_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (onchip_mem_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_mem_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (onchip_mem_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_mem_s1_agent_rsp_fifo (
		.clk               (syspll_outclk0_clk),                             //       clk.clk
		.reset             (nios_cpu_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (onchip_mem_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_mem_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_mem_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_mem_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_mem_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_mem_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_mem_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_mem_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_mem_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_mem_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_TRANS_LOCK            (68),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ddr3_control_avl_0_agent (
		.clk                     (syspll_outclk0_clk),                                     //             clk.clk
		.reset                   (nios_cpu_reset_n_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (ddr3_control_avl_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ddr3_control_avl_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ddr3_control_avl_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ddr3_control_avl_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ddr3_control_avl_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (ddr3_control_avl_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ddr3_control_avl_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ddr3_control_avl_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (ddr3_control_avl_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ddr3_control_avl_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (ddr3_control_avl_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (ddr3_control_avl_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ddr3_control_avl_0_agent_rp_ready),                      //                .ready
		.rp_valid                (ddr3_control_avl_0_agent_rp_valid),                      //                .valid
		.rp_data                 (ddr3_control_avl_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (ddr3_control_avl_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ddr3_control_avl_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ddr3_control_avl_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ddr3_control_avl_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ddr3_control_avl_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ddr3_control_avl_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ddr3_control_avl_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ddr3_control_avl_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ddr3_control_avl_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ddr3_control_avl_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ddr3_control_avl_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ddr3_control_avl_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ddr3_control_avl_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ddr3_control_avl_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ddr3_control_avl_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ddr3_control_avl_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ddr3_control_avl_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (ddr3_control_avl_0_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ddr3_control_avl_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (ddr3_control_avl_0_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (ddr3_control_avl_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr3_control_avl_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ddr3_control_avl_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponserequest (),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_control_avl_0_agent_rsp_fifo (
		.clk               (syspll_outclk0_clk),                                  //       clk.clk
		.reset             (nios_cpu_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (ddr3_control_avl_0_agent_rf_source_data),             //        in.data
		.in_valid          (ddr3_control_avl_0_agent_rf_source_valid),            //          .valid
		.in_ready          (ddr3_control_avl_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ddr3_control_avl_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ddr3_control_avl_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ddr3_control_avl_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ddr3_control_avl_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ddr3_control_avl_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ddr3_control_avl_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ddr3_control_avl_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (89),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.PKT_TRANS_LOCK            (68),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_s0_agent (
		.clk                     (syspll_outclk0_clk),                                 //             clk.clk
		.reset                   (nios_cpu_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (mm_bridge_0_s0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mm_bridge_0_s0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mm_bridge_0_s0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mm_bridge_0_s0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mm_bridge_0_s0_agent_m0_lock),                       //                .lock
		.m0_readdata             (mm_bridge_0_s0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mm_bridge_0_s0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mm_bridge_0_s0_agent_m0_read),                       //                .read
		.m0_waitrequest          (mm_bridge_0_s0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mm_bridge_0_s0_agent_m0_writedata),                  //                .writedata
		.m0_write                (mm_bridge_0_s0_agent_m0_write),                      //                .write
		.rp_endofpacket          (mm_bridge_0_s0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mm_bridge_0_s0_agent_rp_ready),                      //                .ready
		.rp_valid                (mm_bridge_0_s0_agent_rp_valid),                      //                .valid
		.rp_data                 (mm_bridge_0_s0_agent_rp_data),                       //                .data
		.rp_startofpacket        (mm_bridge_0_s0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mm_bridge_0_s0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mm_bridge_0_s0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mm_bridge_0_s0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mm_bridge_0_s0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mm_bridge_0_s0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mm_bridge_0_s0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mm_bridge_0_s0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_0_s0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mm_bridge_0_s0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mm_bridge_0_s0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mm_bridge_0_s0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mm_bridge_0_s0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_0_s0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mm_bridge_0_s0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (mm_bridge_0_s0_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_0_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (mm_bridge_0_s0_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (mm_bridge_0_s0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_0_s0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mm_bridge_0_s0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_0_s0_agent_rsp_fifo (
		.clk               (syspll_outclk0_clk),                              //       clk.clk
		.reset             (nios_cpu_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (mm_bridge_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_bridge_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_bridge_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_bridge_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_bridge_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_bridge_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_bridge_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_bridge_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_bridge_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_bridge_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	bemicro_cv_mm_interconnect_0_router router (
		.sink_ready         (nios_cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios_cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios_cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (syspll_outclk0_clk),                                 //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_src_ready),                                   //       src.ready
		.src_valid          (router_src_valid),                                   //          .valid
		.src_data           (router_src_data),                                    //          .data
		.src_channel        (router_src_channel),                                 //          .channel
		.src_startofpacket  (router_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                              //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios_cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios_cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios_cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios_cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios_cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (syspll_outclk0_clk),                           //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                         //       src.ready
		.src_valid          (router_001_src_valid),                         //          .valid
		.src_data           (router_001_src_data),                          //          .data
		.src_channel        (router_001_src_channel),                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios_cpu_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios_cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (nios_cpu_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (nios_cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (syspll_outclk0_clk),                                //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                              //       src.ready
		.src_valid          (router_002_src_valid),                              //          .valid
		.src_data           (router_002_src_data),                               //          .data
		.src_channel        (router_002_src_channel),                            //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                         //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (onchip_mem_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (onchip_mem_s1_agent_rp_valid),                 //          .valid
		.sink_data          (onchip_mem_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (onchip_mem_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (onchip_mem_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (syspll_outclk0_clk),                           //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (ddr3_control_avl_0_agent_rp_ready),            //      sink.ready
		.sink_valid         (ddr3_control_avl_0_agent_rp_valid),            //          .valid
		.sink_data          (ddr3_control_avl_0_agent_rp_data),             //          .data
		.sink_startofpacket (ddr3_control_avl_0_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (ddr3_control_avl_0_agent_rp_endofpacket),      //          .endofpacket
		.clk                (syspll_outclk0_clk),                           //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                         //       src.ready
		.src_valid          (router_004_src_valid),                         //          .valid
		.src_data           (router_004_src_data),                          //          .data
		.src_channel        (router_004_src_channel),                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                    //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (mm_bridge_0_s0_agent_rp_ready),                //      sink.ready
		.sink_valid         (mm_bridge_0_s0_agent_rp_valid),                //          .valid
		.sink_data          (mm_bridge_0_s0_agent_rp_data),                 //          .data
		.sink_startofpacket (mm_bridge_0_s0_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_s0_agent_rp_endofpacket),          //          .endofpacket
		.clk                (syspll_outclk0_clk),                           //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (91),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (50),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) nios_cpu_instruction_master_limiter (
		.clk                    (syspll_outclk0_clk),                                        //       clk.clk
		.reset                  (nios_cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                          //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                          //          .valid
		.cmd_sink_data          (router_src_data),                                           //          .data
		.cmd_sink_channel       (router_src_channel),                                        //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                  //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                    //          .endofpacket
		.cmd_src_ready          (nios_cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios_cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios_cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios_cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios_cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                         //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                       //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                          //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                   //          .endofpacket
		.rsp_src_ready          (nios_cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios_cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios_cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios_cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios_cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios_cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios_cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (91),
		.PKT_TRANS_POSTED          (65),
		.PKT_TRANS_WRITE           (66),
		.MAX_OUTSTANDING_RESPONSES (50),
		.PIPELINED                 (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) nios_cpu_data_master_limiter (
		.clk                    (syspll_outclk0_clk),                                 //       clk.clk
		.reset                  (nios_cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                               //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                               //          .valid
		.cmd_sink_data          (router_001_src_data),                                //          .data
		.cmd_sink_channel       (router_001_src_channel),                             //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                       //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                         //          .endofpacket
		.cmd_src_ready          (nios_cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios_cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios_cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios_cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios_cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                              //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                            //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                               //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                        //          .endofpacket
		.rsp_src_ready          (nios_cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios_cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios_cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios_cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios_cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios_cpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios_cpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (72),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) nios_cpu_jtag_debug_module_burst_adapter (
		.clk                   (syspll_outclk0_clk),                                             //       cr0.clk
		.reset                 (nios_cpu_reset_n_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                              //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                               //          .data
		.sink0_channel         (cmd_mux_src_channel),                                            //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                              //          .ready
		.source0_valid         (nios_cpu_jtag_debug_module_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (nios_cpu_jtag_debug_module_burst_adapter_source0_data),          //          .data
		.source0_channel       (nios_cpu_jtag_debug_module_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (nios_cpu_jtag_debug_module_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (nios_cpu_jtag_debug_module_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (nios_cpu_jtag_debug_module_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (72),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) onchip_mem_s1_burst_adapter (
		.clk                   (syspll_outclk0_clk),                                //       cr0.clk
		.reset                 (nios_cpu_reset_n_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                              //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                             //          .ready
		.source0_valid         (onchip_mem_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (onchip_mem_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (onchip_mem_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (onchip_mem_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (onchip_mem_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (onchip_mem_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (74),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (31),
		.BURSTWRAP_CONST_VALUE     (31),
		.ADAPTER_VERSION           ("13.1")
	) ddr3_control_avl_0_burst_adapter (
		.clk                   (syspll_outclk0_clk),                                     //       cr0.clk
		.reset                 (nios_cpu_reset_n_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                  //          .ready
		.source0_valid         (ddr3_control_avl_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ddr3_control_avl_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (ddr3_control_avl_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ddr3_control_avl_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ddr3_control_avl_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ddr3_control_avl_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (63),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (89),
		.PKT_BYTE_CNT_H            (75),
		.PKT_BYTE_CNT_L            (70),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (76),
		.PKT_TRANS_COMPRESSED_READ (64),
		.PKT_TRANS_WRITE           (66),
		.PKT_TRANS_READ            (67),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (72),
		.OUT_BURSTWRAP_H           (81),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (63),
		.BURSTWRAP_CONST_VALUE     (63),
		.ADAPTER_VERSION           ("13.1")
	) mm_bridge_0_s0_burst_adapter (
		.clk                   (syspll_outclk0_clk),                                 //       cr0.clk
		.reset                 (nios_cpu_reset_n_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                               //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                              //          .ready
		.source0_valid         (mm_bridge_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mm_bridge_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (mm_bridge_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mm_bridge_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mm_bridge_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mm_bridge_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	bemicro_cv_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (syspll_outclk0_clk),                                        //        clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset),              //  clk_reset.reset
		.sink_ready         (nios_cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios_cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios_cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios_cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios_cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios_cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                      //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                      //           .valid
		.src0_data          (cmd_demux_src0_data),                                       //           .data
		.src0_channel       (cmd_demux_src0_channel),                                    //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                              //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                      //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                      //           .valid
		.src1_data          (cmd_demux_src1_data),                                       //           .data
		.src1_channel       (cmd_demux_src1_channel),                                    //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                              //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                      //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                      //           .valid
		.src2_data          (cmd_demux_src2_data),                                       //           .data
		.src2_channel       (cmd_demux_src2_channel),                                    //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                              //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                                 //           .endofpacket
	);

	bemicro_cv_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (syspll_outclk0_clk),                                 //        clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (nios_cpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios_cpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios_cpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios_cpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios_cpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios_cpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                           //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                           //           .valid
		.src0_data          (cmd_demux_001_src0_data),                            //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                         //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                   //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                     //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                           //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                           //           .valid
		.src1_data          (cmd_demux_001_src1_data),                            //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                         //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                   //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                     //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                           //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                           //           .valid
		.src2_data          (cmd_demux_001_src2_data),                            //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                         //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                   //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                     //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                           //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                           //           .valid
		.src3_data          (cmd_demux_001_src3_data),                            //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                         //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                   //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                      //           .endofpacket
	);

	bemicro_cv_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (syspll_outclk0_clk),                           //       clk.clk
		.reset               (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (syspll_outclk0_clk),                           //       clk.clk
		.reset               (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //          .channel
		.sink0_data          (cmd_demux_src1_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (syspll_outclk0_clk),                           //       clk.clk
		.reset               (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                       //          .channel
		.sink0_data          (cmd_demux_src2_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (syspll_outclk0_clk),                           //       clk.clk
		.reset               (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                     //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                   //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                      //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)                //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (syspll_outclk0_clk),                           //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_src1_data),                          //          .data
		.src1_channel       (rsp_demux_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                    //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (syspll_outclk0_clk),                           //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //      sink.ready
		.sink_channel       (router_003_src_channel),                       //          .channel
		.sink_data          (router_003_src_data),                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_001_src1_data),                      //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (syspll_outclk0_clk),                           //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //      sink.ready
		.sink_channel       (router_004_src_channel),                       //          .channel
		.sink_data          (router_004_src_data),                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_002_src1_data),                      //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (syspll_outclk0_clk),                           //       clk.clk
		.reset              (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //      sink.ready
		.sink_channel       (router_005_src_channel),                       //          .channel
		.sink_data          (router_005_src_data),                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_003_src0_data),                      //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (syspll_outclk0_clk),                           //       clk.clk
		.reset               (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_src_valid),                            //          .valid
		.src_data            (rsp_mux_src_data),                             //          .data
		.src_channel         (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                       //          .channel
		.sink0_data          (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                     //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                      //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                //          .endofpacket
	);

	bemicro_cv_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (syspll_outclk0_clk),                           //       clk.clk
		.reset               (nios_cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                        //          .valid
		.src_data            (rsp_mux_001_src_data),                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                     //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                   //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                      //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),               //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                     //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                     //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                   //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                      //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),             //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),               //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                     //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                      //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                //          .endofpacket
	);

endmodule
